<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CO_p0</title>
      <link href="/2024/09/30/CO_p0/"/>
      <url>/2024/09/30/CO_p0/</url>
      
        <content type="html"><![CDATA[<h1 id="p0课下"><a href="#p0课下" class="headerlink" title="p0课下"></a>p0课下</h1><h2 id="有限状态机思考题"><a href="#有限状态机思考题" class="headerlink" title="有限状态机思考题"></a>有限状态机思考题</h2><h3 id="同步复位与异步复位"><a href="#同步复位与异步复位" class="headerlink" title="同步复位与异步复位"></a>同步复位与异步复位</h3><p>同步复位：当时钟上升沿且复位信号有效时，将寄存器置0</p><p>异步复位：当复位信号有效时，寄存器直接置0</p><p><strong>verilog实现</strong></p><p>同步复位：只在always块中添加 if (reset &#x3D;&#x3D; 1) 判断语句</p><p>异步复位：在always敏感列表中添加reset，同时在always块中添加判断语句</p><p><strong>logisim实现</strong></p><p>同步复位：在register的输入部分使用MUX，通过reset选择正常输入与0（不能利用reset和异步复位接口，因为存在延迟，可能产生毛刺）</p><p>或者使用与门，对~reset和正常输入做与运算</p><p>异步复位：直接连接register的复位接口</p><h3 id="logisim赋初值"><a href="#logisim赋初值" class="headerlink" title="logisim赋初值"></a>logisim赋初值</h3><p>使用MUX，如果register输出为0（默认情况），则选择初值，否则选择其它（缺点：可能使得register滞后一个周期）</p><h2 id="logisim导航"><a href="#logisim导航" class="headerlink" title="logisim导航"></a>logisim导航</h2><p><strong>状态转移</strong></p><p>编码：11 100</p><p>​            01 10</p><p>​            00</p><p>到达B点：100</p><table><thead><tr><th>状态</th><th>输入</th><th>新状态</th></tr></thead><tbody><tr><td>00</td><td>00</td><td>01</td></tr><tr><td>00</td><td>其它</td><td>00，撞墙</td></tr><tr><td>01</td><td>00</td><td>11</td></tr><tr><td>01</td><td>01</td><td>10</td></tr><tr><td>01</td><td>10</td><td>00</td></tr><tr><td>01</td><td>其它</td><td>01，撞墙</td></tr><tr><td>10</td><td>00</td><td>100，到达</td></tr><tr><td>10</td><td>11</td><td>01</td></tr><tr><td>10</td><td>其它</td><td>10，撞墙</td></tr><tr><td>11</td><td>10</td><td>01</td></tr><tr><td>11</td><td>01</td><td>100，到达</td></tr><tr><td>11</td><td>其它</td><td>11，撞墙</td></tr><tr><td>100</td><td>任何</td><td>00</td></tr></tbody></table><h2 id="logisim正则表达式"><a href="#logisim正则表达式" class="headerlink" title="logisim正则表达式"></a>logisim正则表达式</h2><table><thead><tr><th>状态</th><th>状态编码</th><th>输入</th><th>新状态</th></tr></thead><tbody><tr><td>无</td><td>00</td><td>01</td><td>01</td></tr><tr><td>无</td><td>00</td><td>其它</td><td>00</td></tr><tr><td>b</td><td>01</td><td>00</td><td>10</td></tr><tr><td>b</td><td>01</td><td>01</td><td>01</td></tr><tr><td>b</td><td>01</td><td>10</td><td>10</td></tr><tr><td>b</td><td>01</td><td>11</td><td>00</td></tr><tr><td>ba&#x2F;bc</td><td>10</td><td>00</td><td>11(lit)</td></tr><tr><td>ba&#x2F;bc</td><td>10</td><td>01</td><td>01</td></tr><tr><td>ba&#x2F;bc</td><td>10</td><td>10</td><td>11(lit)</td></tr><tr><td>ba&#x2F;bc</td><td>10</td><td>11</td><td>00</td></tr><tr><td>baa&#x2F;bac&#x2F;bca&#x2F;bcc</td><td>11</td><td>01</td><td>01</td></tr><tr><td>baa&#x2F;bac&#x2F;bca&#x2F;bcc</td><td>11</td><td>其它</td><td>00</td></tr></tbody></table><p>此题为mealy状态机，但是因为在上升沿时，寄存器的数值更新了但输入仍没有变化，可能导致输出（由状态和输入决定）在输入更新之前都处于错误值，即此时的输出由新状态和旧输入计算得出。故而应该在寄存器后加上buffer，调整时间。</p><h1 id="p0课上"><a href="#p0课上" class="headerlink" title="p0课上"></a>p0课上</h1><p>第一次紧张刺激的正式上机！！！题目感觉比去年简单些，谢助教不杀之恩（</p><p>凭借记忆记录一下题目和大概思路</p><h2 id="inverse"><a href="#inverse" class="headerlink" title="inverse"></a>inverse</h2><p><strong>题意</strong>：输入已给定集合（有四个元素）的一个排列，求该排列的逆序数</p><blockquote><p>逆序数：对于一个排列a<del>0</del>a<del>1</del>…a<del>n-1</del>，若a<del>k</del>&gt;a<del>j</del>并且0 &lt;&#x3D; k &lt; j &lt;&#x3D; n-1，则称（a<del>k</del>，a<del>j</del>）是一个逆序对。一个排列的逆序对的总数称为这个排列的逆序数</p></blockquote><p><strong>思路</strong>：显然是一个组合逻辑题。由于集合元素给定并且只有四个，本人选择暴力比较。对于一个输入位x，比较x与其右侧的数的大小，若x比某个右侧位的数大，则将一个三位独热编码的相应的位变为1，使用bitadder计算出x可以与右侧数组成多少逆序对。重复三次并将结果相加，得到输出</p><h2 id="poll-king"><a href="#poll-king" class="headerlink" title="poll_king"></a>poll_king</h2><p><del>上机的时候根本没想到题目是什么意思，还是不够卷，给佬gui了</del></p><p><strong>题意</strong>：用Moore状态机统计两个room的总人数。</p><table><thead><tr><th align="center">输入</th><th align="center">取值</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">room</td><td align="center">0</td><td align="center">对0号room操作</td></tr><tr><td align="center">room</td><td align="center">1</td><td align="center">对1号room操作</td></tr><tr><td align="center">op[1:0]</td><td align="center">00</td><td align="center">不进行操作</td></tr><tr><td align="center">op[1:0]</td><td align="center">01</td><td align="center">人数加1</td></tr><tr><td align="center">op[1:0]</td><td align="center">10</td><td align="center">人数减1</td></tr><tr><td align="center">op[1:0]</td><td align="center">11</td><td align="center">人数清零</td></tr><tr><td align="center">num[31:0]</td><td align="center"></td><td align="center">两个room的总人数</td></tr></tbody></table><blockquote><p>初始状态人数为0，对一个room操作时，另一个不变，无复位要求</p></blockquote><p>应该不很复杂。room和op连接上MUX来选择不同的操作，画一个子电路实现op的不同操作就可以了。</p><blockquote><p>room的效果除了使用MUX实现外，可以直接连接寄存器的en</p></blockquote><h2 id="最长严格单调递增后缀子串"><a href="#最长严格单调递增后缀子串" class="headerlink" title="最长严格单调递增后缀子串"></a>最长严格单调递增后缀子串</h2><p><strong>题意</strong>：串行输入一系列16进制数，使用Moore机输出每周期的最长单调递增后缀子串</p><blockquote><p>后缀子串：</p><p>对于一个串a<del>0</del>a<del>1</del>a<del>2</del>…a<del>n-1</del>，其存在n个后缀子串：</p><p>a<del>n-1</del></p><p>a<del>n-2</del>a<del>n-1</del></p><p>a<del>n-3</del>a<del>n-2</del>a<del>n-1</del></p><p>……</p><p>a<del>0</del>a<del>1</del>a<del>2</del>…a<del>n-1</del></p><p>严格单调递增串：</p><p>对于每个0 &lt;&#x3D; k &lt; j &lt;&#x3D; n-1，满足a<del>k</del>&lt;a<del>j</del></p></blockquote><p><strong>思路</strong>：重点在于理解号最长严格单调递增后缀子串与状态转移之间的关系。仔细想想可以发现，长度len是否增加，仅仅取决于当前周期的输入是否大于上一个周期的输入。若大于，len++；否则，len&#x3D;1。当然，初始和置0时len&#x3D;0</p><p>所以可以用一个寄存器储存上一周期输入，一个寄存器负责储存len。输入和上个输入比较决定sum是否++</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次又犯了comparor没有使用unsigned的问题，还好比较容易测出来，不然又得想破头（</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to create a blog</title>
      <link href="/2024/08/11/blog-create/"/>
      <url>/2024/08/11/blog-create/</url>
      
        <content type="html"><![CDATA[<h1 id="小白创建hexo的（艰难）路程"><a href="#小白创建hexo的（艰难）路程" class="headerlink" title="小白创建hexo的（艰难）路程"></a>小白创建hexo的（艰难）路程</h1><h2 id="step-1-下载工具"><a href="#step-1-下载工具" class="headerlink" title="step 1: 下载工具"></a>step 1: 下载工具</h2><p>自行下载git、nodejs</p><p><strong>检查是否下载成功：</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v (node自带包管理器)</span><br><span class="line">git -v</span><br></pre></td></tr></table></figure><p><strong>下载hexo：</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h2 id="step-2-新建仓库"><a href="#step-2-新建仓库" class="headerlink" title="step 2: 新建仓库"></a>step 2: 新建仓库</h2><ol><li>创建一个github账号（连接不上请用魔法）</li><li>在home页面的左侧点击Create repository或之类的</li><li>Repository name: &lt;用户名&gt;.github.io</li><li>勾选 Public 和 Add a README file</li><li>点击创建仓库</li></ol><h2 id="step-3-生成SSH-Keys"><a href="#step-3-生成SSH-Keys" class="headerlink" title="step 3: 生成SSH Keys"></a>step 3: 生成SSH Keys</h2><p>在git bash中输入如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t  rsa -C &lt;邮箱地址&gt;</span><br></pre></td></tr></table></figure><p>接着敲四下键盘</p><p>在路径”C:\Users\cirmatic.ssh”下找到文件”id_rsa.pub”，复制文件中的所有内容</p><p>在github–&gt;settings–&gt;SSH中，新建SSH Keys。Title任意，Key中粘贴刚刚复制的内容，然后点击Add SSH Key</p><p><strong>在git bash中输入以下命令验证是否成功添加：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p><strong>出现successfully authenticated就成功了（大概）</strong></p><h2 id="step-3-本地部署"><a href="#step-3-本地部署" class="headerlink" title="step 3: 本地部署"></a>step 3: 本地部署</h2><ul><li>创建一个文件夹放置博客文件，如”BlogFile”</li><li>打开git bash并且cd到该文件夹</li><li>输入以下命令</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo init #初始化空文件夹</span><br><span class="line">hexo install #下载相关文件</span><br><span class="line">hexo g #生成静态文件</span><br><span class="line">hexo s #本地部署。这将得到一个链接，打开就可看到本地部署的blog</span><br><span class="line">Ctrl ^C #停止本地服务器</span><br></pre></td></tr></table></figure><h2 id="step-4-上传博客"><a href="#step-4-上传博客" class="headerlink" title="step 4: 上传博客"></a>step 4: 上传博客</h2><ul><li><p>在github的仓库中，点击Code并复制仓库链接。（它或许长这样：”<a href="https://github.com/">https://github.com/</a>&lt;用户名&gt;&#x2F;&lt;用户名&gt;.github.io”）</p></li><li><p>打开”BlogFile”文件夹中的”_config.yml”文件，将文件末尾deploy:及以后的内容改为以下代码 ：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type:git</span><br><span class="line">repository:<span class="string">&quot;https://github.com/&lt;用户名&gt;/&lt;用户名&gt;.github.io&quot;</span> <span class="comment">//此处是复制的仓库链接</span></span><br><span class="line">branch:main</span><br></pre></td></tr></table></figure><ul><li>打开git bash并cd到”BlogFile”，输入：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p><em>此处可能出现诸如“git未部署”之类的问题（主要是忘记那个报错叫什么了），请下载插件hexo-deployer-git</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure><ul><li>上传blog，输入：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p><em>第一次使用时，需要设置配置</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;your@example.com&quot;</span> <span class="comment">//填入邮箱</span></span><br><span class="line">git config --global user.name <span class="string">&quot;your name&quot;</span> <span class="comment">//填入用户名</span></span><br></pre></td></tr></table></figure><ul><li>配置完成后再次上传：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><ul><li>在弹出的github窗口中登录</li></ul><h2 id="step-5-访问"><a href="#step-5-访问" class="headerlink" title="step 5: 访问"></a>step 5: 访问</h2><p>输入”&lt;用户名&gt;.github.io”访问</p><h2 id="网络问题"><a href="#网络问题" class="headerlink" title="网络问题"></a>网络问题</h2><p><u>在以上步骤中，涉及下载和上传的步骤都可能出现网络问题。这很玄学</u></p><p><strong>可能的解决方法</strong>：</p><ol><li>重新开启&#x2F;关闭梯子</li><li>更换下载的镜像源：<a href="https://blog.csdn.net/qq_43940789/article/details/131449710">国内npm源镜像（npm加速下载） 指定npm镜像_npm 国内镜像-CSDN博客</a></li><li>等一等。有时候你只需要等一等（比如我吃了个午饭后，hexo d就正常上传了）</li><li>在stackoverflow上看到一个集大成的回答</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm config rm proxy #这个似乎是移除了npm的一些代理设置，因为npm原先有些奇奇怪怪的代理设置</span><br><span class="line">npm config rm https-proxy</span><br><span class="line">npm config <span class="built_in">set</span> https-proxy https://username:password@proxy.company.com:<span class="number">6050</span></span><br><span class="line">npm config <span class="built_in">set</span> proxy http://username:password@proxy.company.com:<span class="number">6050</span></span><br><span class="line">npm config <span class="built_in">set</span> registry http://registry.npmjs.org/</span><br></pre></td></tr></table></figure><p>最终我通过换源+”npm config rm proxy”成功弄通了npm install</p><h2 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h2><p>在git bash中输入”hexo new &lt;文件名&gt;”后，会自动创建一个.md文件，编辑这个文件后g、s、d就可以了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Test</title>
      <link href="/2024/07/23/Test/"/>
      <url>/2024/07/23/Test/</url>
      
        <content type="html"><![CDATA[<p>this is a test</p><p>Network recovered after some time, test succeeds!</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WHAT</title>
      <link href="/2024/07/23/WHAT/"/>
      <url>/2024/07/23/WHAT/</url>
      
        <content type="html"><![CDATA[<h1 id="testing-typora"><a href="#testing-typora" class="headerlink" title="testing typora"></a>testing typora</h1><h2 id="中标题"><a href="#中标题" class="headerlink" title="中标题"></a>中标题</h2><h3 id="小标题"><a href="#小标题" class="headerlink" title="小标题"></a>小标题</h3><h4 id="小小标题"><a href="#小小标题" class="headerlink" title="小小标题"></a>小小标题</h4><h5 id="小小小标题"><a href="#小小小标题" class="headerlink" title="小小小标题"></a>小小小标题</h5><p><strong>加粗</strong></p><p><em>斜体</em></p><ol><li>有序标</li></ol><ul><li>无序标</li></ul><blockquote><p>注释</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;一点代码&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">mian</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;高亮&#x3D;&#x3D;（或许我该考虑另一个版本的typora(有更多高亮)）</p><p><del>删除线</del></p><p>log<del>2</del>10^2^</p><p><u>下划线</u></p><p><u>另一个下划线</u></p><!----><!--注释？-->]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/07/23/Hello-World/"/>
      <url>/2024/07/23/Hello-World/</url>
      
        <content type="html"><![CDATA[<p>Hello World,finally</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
